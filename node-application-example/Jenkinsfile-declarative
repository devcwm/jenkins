pipeline {
    agent docker-agent
    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch to checkout')
    }
    options {
        skipDefaultCheckout()
    }
    environment {
        DOCKER_IMAGE = 'devcwm/node-application'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [
                        [$class: 'BranchSpec', name: params.BRANCH]
                    ],
                    userRemoteConfigs: [
                        [
                            url: env.REPO_URL,
                            credentialsId: env.CREDENTIALS_ID
                        ]
                    ]
                ])
            }
        }
        
        stage('Build') {
            steps {
                dir('node-application-example') {
                    echo "Building Docker image"
                    sh "docker build -t ${DOCKER_IMAGE}:latest -t ${DOCKER_IMAGE}:${BUILD_ID} ."
                }
            }
        }
        
        stage('Test') {
            steps {
                echo "Testing Docker image"
                
                sh "docker run -d -p 3000:3000 ${DOCKER_IMAGE}:latest"
                sleep(time: 5, unit: 'SECONDS')
                
                script {
                    def response = sh(script: 'curl -s http://localhost:3000/', returnStdout: true).trim()
                    assert response == 'Hello, World!'
                }
            }
        }
        
        stage('Deploy') {
            steps {
                echo "Push docker build to repository"
                echo "${env.DOCKER_REGISTRY_URL}"
                
                sh "docker login -u ${env.DOCKER_USER} -p ${env.DOCKER_HUB_TOKEN} ${env.DOCKER_REGISTRY_URL}"
                sh "docker push ${DOCKER_IMAGE}:${BUILD_ID}"
                sh "docker push ${DOCKER_IMAGE}:latest"
            }
        }
    }
    
    post {
        success {
            echo "Build finished successfully!"
        }
        failure {
            echo "Build had failed! Check logs."
        }
        cleanup {
            echo "Cleanup Docker Images"
            sh 'docker stop $(docker ps -q)'
            sh 'docker rm $(docker ps -aq)'
        }
    }
}
