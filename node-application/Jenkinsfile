pipeline {
    agent any
    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch to checkout')
    }
    options {
        skipDefaultCheckout() 
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: params.BRANCH]],
                        userRemoteConfigs: [[
                            url: env.REPO_URL,
                            credentialsId: env.CREDENTIALS_ID
                        ]]
                    ])
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    // Build node application Docker image in node-application directory
                    dir('node-application') {
                        echo "Building Docker image"
                        sh 'ls -ltr'
                        sh 'docker build -t hello-world-node-app:latest -t hello-world-node-app:${BUILD_ID} .'
                    }
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    echo "Testing Docker image"
                    
                    // Run the Docker container
                    sh 'docker run -d -p 3000:3000 hello-world-node-app'
                    
                    // Wait a few seconds to allow the container to start
                    sleep(time: 5, unit: 'SECONDS')
                    
                    // Use curl to fetch the response from the container
                    def response = sh(script: 'curl -s http://localhost:3000/', returnStdout: true).trim()
                    
                    // Assert that the response matches the expected output
                    assert response == 'Hello, World!'
                    
                    // Stop the container
                    sh 'docker stop $(docker ps -q)'
                    
                }
            }
        }
        stage('Deploy') {
            steps {
                // Push docker file to 
                echo "Push docker build to repository"
                echo "${env.DOCKER_REGISTRY_URL}"
                sh "docker login -u ${env.DOCKER_USER} -p ${env.DOCKER_HUB_TOKEN} ${env.DOCKER_REGISTRY_URL}"
                sh "docker push devcwm/node-application:${BUILD_ID}"
                sh 'docker rm $(docker ps -aq)'
            }
        }
    }
    post {
        always {
            // Post-build actions
            echo "Hello"
        }
    }
}